"use strict";(self.webpackChunkOERTemplate=self.webpackChunkOERTemplate||[]).push([[7531],{5026:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>d,contentTitle:()=>s,default:()=>c,frontMatter:()=>l,metadata:()=>r,toc:()=>h});const r=JSON.parse('{"id":"CSS3-Introduction/box-model","title":"Box Model","description":"Box Model","source":"@site/docs/CSS3-Introduction/box-model.md","sourceDirName":"CSS3-Introduction","slug":"/CSS3-Introduction/box-model","permalink":"/WebProgrammingFoundations/CSS3-Introduction/box-model","draft":false,"unlisted":false,"editUrl":"https://github.com/catherine-leung/OERTemplate/tree/main/docs/CSS3-Introduction/box-model.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"box-model","title":"Box Model","sidebar_position":3,"description":"Box Model"},"sidebar":"courseNotesSidebar","previous":{"title":"Units & Properties","permalink":"/WebProgrammingFoundations/CSS3-Introduction/units-properties"},"next":{"title":"Example Code","permalink":"/WebProgrammingFoundations/CSS3-Introduction/example-code"}}');var i=o(4848),t=o(8453);const l={id:"box-model",title:"Box Model",sidebar_position:3,description:"Box Model"},s="Box Model",d={},h=[{value:"CSS &quot;Box&quot; Properties",id:"css-box-properties",level:2},{value:"&quot;Displaying&quot; an Element",id:"displaying-an-element",level:2},{value:"&quot;Positioning&quot; an Element",id:"positioning-an-element",level:2},{value:"<code>z-index</code> Property",id:"z-index-property",level:3},{value:"<code>overflow</code> Property",id:"overflow-property",level:3},{value:"Validating CSS",id:"validating-css",level:2}];function a(e){const n={a:"a",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",img:"img",li:"li",p:"p",pre:"pre",ul:"ul",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(n.header,{children:(0,i.jsx)(n.h1,{id:"box-model",children:"Box Model"})}),"\n",(0,i.jsxs)(n.p,{children:["All elements can be considered to be a box. The ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Box_Model",children:"Box Model"}),'\nis a specification for how all the various attributes of an element\'s sizing\nrelate to each other. A "box" is made up of four distinct parts:']}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:"margin - area (whitespace) between this element and other surrounding elements"}),"\n",(0,i.jsx)(n.li,{children:"border - a line (or lines) surrounding this element"}),"\n",(0,i.jsx)(n.li,{children:"padding - area (whitespace) between the border and the inner content of the element"}),"\n",(0,i.jsx)(n.li,{children:"content - the actual content of the element (e.g., text)"}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["The easiest way to visual this is using your browser's dev tools, which have\n",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Tools/Page_Inspector/How_to/Examine_and_edit_the_box_model",children:"tools for viewing and altering"})," each of these parts."]}),"\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.img,{src:"https://firefox-source-docs.mozilla.org/_images/box-model.png",alt:"Box Model View in Firefox Dev Tools"})}),"\n",(0,i.jsx)(n.h2,{id:"css-box-properties",children:'CSS "Box" Properties'}),"\n",(0,i.jsx)(n.p,{children:"The sizes (and style) of each of these can be controlled through CSS properties:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/margin",children:(0,i.jsx)(n.code,{children:"margin"})})," / (",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/margin-top",children:(0,i.jsx)(n.code,{children:"margin-top"})}),", ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/margin-right",children:(0,i.jsx)(n.code,{children:"margin-right"})}),", ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/margin-bottom",children:(0,i.jsx)(n.code,{children:"margin-bottom"})})," and ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/margin-left",children:(0,i.jsx)(n.code,{children:"margin-left"})}),")"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsx)(n.p,{children:(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/border",children:(0,i.jsx)(n.code,{children:"border"})})}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/border-style",children:(0,i.jsx)(n.code,{children:"border-style"})})," / (",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-style",children:(0,i.jsx)(n.code,{children:"border-top-style"})}),", ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-style",children:(0,i.jsx)(n.code,{children:"border-right-style"})}),", ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-style",children:(0,i.jsx)(n.code,{children:"border-bottom-style"})})," and ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-style",children:(0,i.jsx)(n.code,{children:"border-left-style"})}),")"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/border-width",children:(0,i.jsx)(n.code,{children:"border-width"})})," / ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-width",children:(0,i.jsx)(n.code,{children:"border-top-width"})}),", ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-width",children:(0,i.jsx)(n.code,{children:"border-right-width"})}),", ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-width",children:(0,i.jsx)(n.code,{children:"border-bottom-width"})})," and ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-width",children:(0,i.jsx)(n.code,{children:"border-left-width"})})]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/border-color",children:(0,i.jsx)(n.code,{children:"border-color"})})," / ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/border-top-color",children:(0,i.jsx)(n.code,{children:"border-top-color"})}),", ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/border-right-color",children:(0,i.jsx)(n.code,{children:"border-right-color"})}),", ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/border-bottom-color",children:(0,i.jsx)(n.code,{children:"border-bottom-color"})})," and ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/border-left-color",children:(0,i.jsx)(n.code,{children:"border-left-color"})})]}),"\n"]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/padding",children:(0,i.jsx)(n.code,{children:"padding"})})," / ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/padding-top",children:(0,i.jsx)(n.code,{children:"padding-top"})}),", ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/padding-right",children:(0,i.jsx)(n.code,{children:"padding-right"})}),", ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/padding-bottom",children:(0,i.jsx)(n.code,{children:"padding-bottom"})})," and ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/padding-left",children:(0,i.jsx)(n.code,{children:"padding-left"})})]}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.p,{children:["Each of these is a ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/Shorthand_properties",children:"shorthand property"})," that lets you\nspecify multiple CSS properties at the same time. For example, the following\nare equivalent:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-css",children:"/* Use separate properties for all aspects */\n.example1 {\n  border-width: 1px;\n  border-style: solid;\n  border-color: #000;\n\n  margin-top: 5px;\n  margin-right: 10px;\n  margin-bottom: 15px;\n  margin-left: 20px;\n}\n\n/* Use shorthand properties to do everything at once */\n.example2 {\n  border: 1px solid #000;\n  margin: 5px 10px 15px 20px;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["In the code above for ",(0,i.jsx)(n.code,{children:"margin"}),", notice how the the different portions of the\n",(0,i.jsx)(n.code,{children:"margin"})," get translated into a single line. The order we use follows the same\norder as a clockface, the numbers begin at the ",(0,i.jsx)(n.code,{children:"top"})," and go ",(0,i.jsx)(n.em,{children:"clockwise"})," around:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-css",children:".example2 {\n  /*      top right bottom left */\n  margin: 5px 10px 15px 20px;\n}\n"})}),"\n",(0,i.jsx)(n.p,{children:"We often shorten our lists when multiple properties share the same values:"}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-css",children:".example3 {\n  /* Everything is different, specify them all */\n  margin: 10px 5px 15px 20px;\n}\n\n.example4 {\n  /* Top and bottom are both 10px, right and left are both 5px */\n  margin: 10px 5px;\n}\n\n.example5 {\n  /* Top, bottom, left, and right are all 5px */\n  margin: 5px;\n}\n"})}),"\n",(0,i.jsxs)(n.p,{children:["When two elements that specify a ",(0,i.jsx)(n.code,{children:"margin"})," at the top and bottom are stacked, the\nbrowser will ",(0,i.jsx)(n.em,{children:"collapse"})," (i.e., combine) the two into a single margin, whose size is\nthe largest of the two. Consider the following CSS:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:"<style>\n  h1 {\n    margin-bottom: 25px;\n  }\n\n  p {\n    margin-top: 20px;\n  }\n</style>\n<h1>Heading</h1>\n<p>Paragraph</p>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["Here the stylesheet calls for a ",(0,i.jsx)(n.code,{children:"<p>"})," element to have ",(0,i.jsx)(n.code,{children:"20px"})," of whitespace above it.\nHowever, since the ",(0,i.jsx)(n.code,{children:"<h1>"})," has ",(0,i.jsx)(n.code,{children:"25px"})," of whitespace below it, when the two are placed\none after the other, the distance between them will be ",(0,i.jsx)(n.code,{children:"25px"})," vs. ",(0,i.jsx)(n.code,{children:"45px"}),"\n(i.e., the browser won't apply both margins, but just make sure that both margins are\nhonoured)."]}),"\n",(0,i.jsx)(n.h2,{id:"displaying-an-element",children:'"Displaying" an Element'}),"\n",(0,i.jsx)(n.p,{children:"CSS lets us control how an element gets displayed. This is a large\ntopic, and we'll give an overview of some of the most common display types. Further\nstudy is required to fully appreciate the subtleties of each layout method."}),"\n",(0,i.jsxs)(n.p,{children:["Perhaps the easiest way to get started understanding display types is to look at\nwhat ",(0,i.jsx)(n.code,{children:"display: none;"})," does:"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:'<style>\n  .hidden {\n    display: none;\n  }\n\n  .error-msg {\n    /* styles for error message UI */\n  }\n</style>\n\n<div class="hidden error-msg">\n  <h1>Error!</h1>\n  <p>There was an error completing your request.</p>\n</div>\n'})}),"\n",(0,i.jsxs)(n.p,{children:["When an element uses a display type of ",(0,i.jsx)(n.code,{children:"none"}),", nothing will be painted to the screen.\nThis includes the element itself, but also any of its children."]}),"\n",(0,i.jsxs)(n.p,{children:["If elements don't have a display type of ",(0,i.jsx)(n.code,{children:"none"}),", they get included in the render\ntree and eventually painted to the screen. If we don't specify a display type, the default is ",(0,i.jsx)(n.code,{children:"inline"})," for inline elements (like ",(0,i.jsx)(n.code,{children:"<a>"})," and ",(0,i.jsx)(n.code,{children:"<span>"}),") and ",(0,i.jsx)(n.code,{children:"block"})," for block-level elements (like ",(0,i.jsx)(n.code,{children:"<p>"})," and ",(0,i.jsx)(n.code,{children:"<div>"}),")."]}),"\n",(0,i.jsxs)(n.p,{children:["With ",(0,i.jsx)(n.code,{children:"inline"}),", boxes are laid out horizontally (typically left to right, unless\nwe are doing ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/direction",children:"rtl"}),"), starting\nat the top corner of the parent."]}),"\n",(0,i.jsxs)(n.p,{children:["We can also specify that an element should be ",(0,i.jsx)(n.code,{children:"display: block;"}),", which will layout\nblocks in a vertical way, using ",(0,i.jsx)(n.code,{children:"margin"})," to determine the space between them. To\nunderstand the difference, try this using this snippet of code an HTML page, and\nchange the ",(0,i.jsx)(n.code,{children:"display"})," from ",(0,i.jsx)(n.code,{children:"block"})," to ",(0,i.jsx)(n.code,{children:"inline"}),":"]}),"\n",(0,i.jsx)(n.pre,{children:(0,i.jsx)(n.code,{className:"language-html",children:"<style>\n  h1 {\n    display: block; /* try changing to `inline` */\n  }\n</style>\n<h1>One</h1>\n<h1>Two</h1>\n<h1>Three3</h1>\n"})}),"\n",(0,i.jsxs)(n.p,{children:["We can also control the way that elements are laid out ",(0,i.jsx)(n.em,{children:"within"})," an element (i.e.,\nits children). Some of the display types for inside layout options include:"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Table",children:(0,i.jsx)(n.code,{children:"table"})})," - make elements behave as though they were part of a ",(0,i.jsx)(n.code,{children:"<table>"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Display#display_flex",children:(0,i.jsx)(n.code,{children:"flex"})})," - lays out the contents according to the ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Flexible_Box_Layout",children:"flexbox model"})]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Display#display_grid",children:(0,i.jsx)(n.code,{children:"grid"})})," - lays out the contents according to the ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/CSS_Grid_Layout/Basic_Concepts_of_Grid_Layout",children:"grid model"})]}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"A great way to learn a bit about the latter two is to work through the following\nonline CSS learning games:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://flexboxfroggy.com/",children:"Flexbox Froggy"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"http://www.flexboxdefense.com/",children:"Flexbox Defense"})}),"\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"http://cssgridgarden.com/",children:"Grid Garden"})}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"positioning-an-element",children:'"Positioning" an Element'}),"\n",(0,i.jsx)(n.p,{children:"Many web interface designs require more sophisticated element positioning than\nsimply allowing everything to flow. Sometimes we need very precise control\nover where things end up, and how the page reacts to scrolling or movement."}),"\n",(0,i.jsxs)(n.p,{children:["To accomplish this kind of ",(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning",children:"positioning"})," we can\nuse the CSS ",(0,i.jsxs)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/position",children:[(0,i.jsx)(n.code,{children:"position"})," property"]}),"\nto override the defaults provided by the browser."]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning#Static_positioning",children:(0,i.jsx)(n.code,{children:"static"})})," - the default, where elements are positioned according to the normal flow of the document"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning#Relative_positioning",children:(0,i.jsx)(n.code,{children:"relative"})})," - elements are positioned according to the normal flow, but with extra offsets (",(0,i.jsx)(n.code,{children:"top, bottom, left, right"}),"), allowing content to overlap"]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning#Absolute_positioning",children:(0,i.jsx)(n.code,{children:"absolute"})}),' - elements are positioned separate from normal flow, in their own "layer" relative to their ancestor element, and don\'t affect other elements. Useful for things like popups, dialog boxes, etc.']}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning#Fixed_positioning",children:(0,i.jsx)(n.code,{children:"fixed"})})," - elements are positioned separate from normal flow, and get positioned relative to the viewport."]}),"\n"]}),"\n",(0,i.jsxs)(n.li,{children:["\n",(0,i.jsxs)(n.p,{children:[(0,i.jsx)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Learn/CSS/CSS_layout/Positioning#position_sticky",children:(0,i.jsx)(n.code,{children:"sticky"})})," - a hybrid of ",(0,i.jsx)(n.code,{children:"relative"})," and ",(0,i.jsx)(n.code,{children:"fixed"}),', allowing an element to be positioned relatively, but then "stick" when scrolling or resizing the viewport. This is often used for headings, which can be scrolled up, but then stay in place as you continue down into the document.']}),"\n"]}),"\n"]}),"\n",(0,i.jsxs)(n.h3,{id:"z-index-property",children:[(0,i.jsx)(n.code,{children:"z-index"})," Property"]}),"\n",(0,i.jsxs)(n.p,{children:["In addition to controlling how elements are positioned in the X and Y planes,\nwe can also ",(0,i.jsx)(n.em,{children:"stack"})," elements on top of each other in different layers. We achieve\nthis through the use of the ",(0,i.jsxs)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/z-index",children:[(0,i.jsx)(n.code,{children:"z-index"})," property"]}),"."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"z-index"})," is a value positive or negative integer, indicting which stack\nlevel the element should be placed within. The default stack level is ",(0,i.jsx)(n.code,{children:"0"}),", so\nusing a ",(0,i.jsx)(n.code,{children:"z-index"})," higher than ",(0,i.jsx)(n.code,{children:"0"})," will place the content on top of anything below it."]}),"\n",(0,i.jsxs)(n.p,{children:["The ",(0,i.jsx)(n.code,{children:"z-index"})," is often used with ",(0,i.jsx)(n.code,{children:"position"})," to place content in arbitrary positions\novertop of other content. For example, a ",(0,i.jsx)(n.a,{href:"https://getbootstrap.com/docs/5.3/components/modal/#live-demo",children:"modal window"})," that appears as a dialog box, over the site's content."]}),"\n",(0,i.jsxs)(n.h3,{id:"overflow-property",children:[(0,i.jsx)(n.code,{children:"overflow"})," Property"]}),"\n",(0,i.jsxs)(n.p,{children:["When the contents on an element are too large to be displayed, we have options\nas to how the browser will display the overflowing content. To do this, we\nwork with the ",(0,i.jsxs)(n.a,{href:"https://developer.mozilla.org/en-US/docs/Web/CSS/overflow",children:[(0,i.jsx)(n.code,{children:"overflow"}),", ",(0,i.jsx)(n.code,{children:"overflow-x"}),", ",(0,i.jsx)(n.code,{children:"overflow-y"})]})," properties"]}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"visible"})," - default. No scroll bars provided, content is not clipped."]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"scroll"})," - always include scroll bars, content is clipped and and scroll if required"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"auto"})," - only include scroll bars when necessary, content is clipped and and scroll if required"]}),"\n",(0,i.jsxs)(n.li,{children:[(0,i.jsx)(n.code,{children:"hidden"})," - content is clipped, no scroll bars provided."]}),"\n"]}),"\n",(0,i.jsx)(n.h2,{id:"validating-css",children:"Validating CSS"}),"\n",(0,i.jsx)(n.p,{children:"If you recall from last week, we introduced an online validator to check your HTML code for errors. There are similar tools for CSS, for example:"}),"\n",(0,i.jsxs)(n.ul,{children:["\n",(0,i.jsx)(n.li,{children:(0,i.jsx)(n.a,{href:"https://jigsaw.w3.org/css-validator/",children:"https://jigsaw.w3.org/css-validator/"})}),"\n"]}),"\n",(0,i.jsx)(n.p,{children:"The above allows you to enter a URL to an existing web page, or enter CSS directly in a text field. It\nwill then attempt to parse your CSS and report back on any errors or warnings."})]})}function c(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,i.jsx)(n,{...e,children:(0,i.jsx)(a,{...e})}):a(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>l,x:()=>s});var r=o(6540);const i={},t=r.createContext(i);function l(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function s(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:l(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);