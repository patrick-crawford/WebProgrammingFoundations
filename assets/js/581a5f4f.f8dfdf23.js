"use strict";(self.webpackChunkOERTemplate=self.webpackChunkOERTemplate||[]).push([[5213],{8101:(e,t,i)=>{i.r(t),i.d(t,{assets:()=>l,contentTitle:()=>s,default:()=>h,frontMatter:()=>o,metadata:()=>n,toc:()=>d});const n=JSON.parse('{"id":"Working-With-Forms/processing-multipart-form-data","title":"Processing Multipart Form Data","description":"Processing Multipart Form Data","source":"@site/docs/Working-With-Forms/processing-multipart-form-data.md","sourceDirName":"Working-With-Forms","slug":"/Working-With-Forms/processing-multipart-form-data","permalink":"/WebProgrammingFoundations/Working-With-Forms/processing-multipart-form-data","draft":false,"unlisted":false,"editUrl":"https://github.com/catherine-leung/OERTemplate/tree/main/docs/Working-With-Forms/processing-multipart-form-data.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"id":"processing-multipart-form-data","title":"Processing Multipart Form Data","sidebar_position":3,"description":"Processing Multipart Form Data"},"sidebar":"courseNotesSidebar","previous":{"title":"Processing URL Encoded Form Data","permalink":"/WebProgrammingFoundations/Working-With-Forms/processing-url-encoded-form-data"},"next":{"title":"Example Code","permalink":"/WebProgrammingFoundations/Working-With-Forms/example-code"}}');var r=i(4848),a=i(8453);const o={id:"processing-multipart-form-data",title:"Processing Multipart Form Data",sidebar_position:3,description:"Processing Multipart Form Data"},s="Processing Multipart Form Data",l={},d=[{value:"Processing the Data with Middleware",id:"processing-the-data-with-middleware",level:2},{value:"Default (Simple) configuration",id:"default-simple-configuration",level:3},{value:"Writing The Route Handler",id:"writing-the-route-handler",level:2},{value:"Additional Configuration (diskStorage)",id:"additional-configuration-diskstorage",level:2},{value:"Ephemeral / Read-Only File Systems",id:"ephemeral--read-only-file-systems",level:2}];function c(e){const t={a:"a",blockquote:"blockquote",code:"code",em:"em",h1:"h1",h2:"h2",h3:"h3",header:"header",p:"p",pre:"pre",strong:"strong",...(0,a.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(t.header,{children:(0,r.jsx)(t.h1,{id:"processing-multipart-form-data",children:"Processing Multipart Form Data"})}),"\n",(0,r.jsxs)(t.p,{children:["If an HTML <form> element requires ",(0,r.jsx)(t.strong,{children:"file uploads"}),' as well as regular form data, then we can no longer use the default "enctype" value ',(0,r.jsx)(t.code,{children:"application/x-www-form-urlencoded"}),". Instead, we must use the aforementioned ",(0,r.jsx)(t.code,{children:"multipart/form-data"}),". For example, consider the following form using input ",(0,r.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input/file",children:'type="file"'})," as well as a simple text input:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-html",children:'<form method="post" action="/uploadEntry" enctype="multipart/form-data">\n  <label>\n    File Description<br />\n    <input type="text" name="fileDescription" />\n  </label>\n  <br /><br />\n\n  <label>\n    Avatar Image<br />\n    <input type="file" name="avatar" />\n  </label>\n  <br /><br />\n\n  <button type="submit">Upload Image</button>\n</form>\n'})}),"\n",(0,r.jsx)(t.p,{children:'In the above code, we have modified the "action" to submit to a new route "/uploadEntry" as well as modified the enctype to use "multipart/form-data".'}),"\n",(0,r.jsx)(t.h2,{id:"processing-the-data-with-middleware",children:"Processing the Data with Middleware"}),"\n",(0,r.jsxs)(t.p,{children:["Recall, when working with url-encoded data, we had to use ",(0,r.jsx)(t.a,{href:"/WebProgrammingFoundations/Advanced-Routing-Middleware/middleware",children:'"Middleware"'})," (specifically the built-in middleware: ",(0,r.jsx)(t.a,{href:"/WebProgrammingFoundations/Advanced-Routing-Middleware/middleware#expressurlencoded",children:"express.urlencoded()"}),') to process the data and deliver it in a format that we can process. This is also the case for "multipart/form-data", however there are no available built-in middleware functions that we can use. Instead, we will use the popular third-party middleware: ',(0,r.jsx)(t.a,{href:"https://www.npmjs.com/package/multer",children:'"Multer"'})]}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:["Multer is a node.js middleware for handling multipart/form-data, which is primarily used for uploading files. It is written on top of ",(0,r.jsx)(t.a,{href:"https://github.com/mscdex/busboy",children:"busboy"})," for maximum efficiency."]}),"\n",(0,r.jsxs)(t.p,{children:[(0,r.jsx)(t.strong,{children:"NOTE:"})," Multer will not process any form which is not multipart (multipart/form-data)."]}),"\n"]}),"\n",(0,r.jsx)(t.p,{children:"To get started using Multer, we will need to install it:"}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-bash",children:"npm install multer\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Next, we must ",(0,r.jsx)(t.em,{children:"require"})," the module and configure the middleware, ie:"]}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:"const multer = require('multer');\n"})}),"\n",(0,r.jsx)(t.h3,{id:"default-simple-configuration",children:"Default (Simple) configuration"}),"\n",(0,r.jsx)(t.p,{children:'To begin, we will use the default configuration for Multer. All that is required is a "dest" property that defines where the files will go once uploaded. In this case, we will use the folder "uploads/":'}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:"const upload = multer({ dest: 'uploads/' });\n"})}),"\n",(0,r.jsx)(t.h2,{id:"writing-the-route-handler",children:"Writing The Route Handler"}),"\n",(0,r.jsx)(t.p,{children:'With our middleware in place, we can now write our route handler for the route defined in our "action" attribute: "/uploadEntry". When using Multer, we not only have access to the "req.body" property to get the data submitted in the form, but also a "req.file" property to get information about the uploaded file:'}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:"app.post('/uploadEntry', upload.single('avatar'), (req, res) => {\n  res.send({ body: req.body, file: req.file });\n});\n"})}),"\n",(0,r.jsxs)(t.p,{children:['Notice how we apply the middleware on the specific route, rather than using "app.use()". Additionally, since we\'re uploading a single image, we invoke the "single" method, passing the "name" attribute for our ',(0,r.jsx)(t.code,{children:'<input type="file">'}),' (ie: "avatar").']}),"\n",(0,r.jsx)(t.p,{children:'If we try submitting the form again, we should see a result in the browser with both the form and file upload information (ie: "req.body" & "req.file").'}),"\n",(0,r.jsxs)(t.p,{children:['While this does indeed work and the file is uploaded to the correct destination (the "uploads" folder, as specified), we do not have any control over how the file is ',(0,r.jsx)(t.em,{children:"named"}),". Additionally, we lose the file extension associated with the file. To gain more control over the file upload, we will need to perform some additional configuration."]}),"\n",(0,r.jsx)(t.h2,{id:"additional-configuration-diskstorage",children:"Additional Configuration (diskStorage)"}),"\n",(0,r.jsxs)(t.p,{children:["In order to customize the filename of the upload, we will need to use the ",(0,r.jsx)(t.a,{href:"http://expressjs.com/en/resources/middleware/multer.html",children:'"diskStorage"'}),' option when we configure our "upload" middleware. Here, instead of creating "upload" using ',(0,r.jsx)(t.code,{children:"multer({ dest: 'uploads/' });"}),', we will use the following "diskStorage" configuration:']}),"\n",(0,r.jsx)(t.pre,{children:(0,r.jsx)(t.code,{className:"language-js",children:"const storage = multer.diskStorage({\n  destination: 'uploads/',\n  filename: function (req, file, cb) {\n    cb(null, Date.now() + path.extname(file.originalname));\n  },\n});\n\nconst upload = multer({ storage: storage });\n"})}),"\n",(0,r.jsxs)(t.p,{children:["Here, we specify the filename to be a current date, using ",(0,r.jsx)(t.a,{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Date/now",children:'"Date.now()"'}),", ie:"]}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsx)(t.p,{children:"The number of milliseconds elapsed since the epoch, which is defined as the midnight at the beginning of January 1, 1970, UTC."}),"\n"]}),"\n",(0,r.jsxs)(t.p,{children:["We also retain the current extension using ",(0,r.jsx)(t.a,{href:"https://nodejs.org/docs/latest/api/path.html#pathextnamepath",children:"path.extname()"})," from the ",(0,r.jsx)(t.strong,{children:'"path"'})," module: ",(0,r.jsx)(t.code,{children:'const path = require("path");'})]}),"\n",(0,r.jsx)(t.h2,{id:"ephemeral--read-only-file-systems",children:"Ephemeral / Read-Only File Systems"}),"\n",(0,r.jsxs)(t.p,{children:['As a final note, it\'s important to consider that many cloud-based hosting providers either have an "ephemeral" file system (ie: data is not persisted across deploys and restarts) or the file system is read-only. In this case, if we wish to persist file uploads, we could use a library like ',(0,r.jsx)(t.a,{href:"https://www.npmjs.com/package/streamifier",children:'"streamifier"'})," to create a readable stream of the file data, rather than store it. We could then pass the data to a free service like ",(0,r.jsx)(t.a,{href:"https://cloudinary.com/",children:'"Cloudinary"'})," to host the file."]}),"\n",(0,r.jsxs)(t.blockquote,{children:["\n",(0,r.jsxs)(t.p,{children:["For more information, see the Cloudinary documentation on ",(0,r.jsx)(t.a,{href:"https://cloudinary.com/documentation/upload_images",children:"Uploading assets"})," / ",(0,r.jsx)(t.a,{href:"https://cloudinary.com/documentation/upload_images#upload_data_stream",children:"Upload data stream"})]}),"\n"]})]})}function h(e={}){const{wrapper:t}={...(0,a.R)(),...e.components};return t?(0,r.jsx)(t,{...e,children:(0,r.jsx)(c,{...e})}):c(e)}},8453:(e,t,i)=>{i.d(t,{R:()=>o,x:()=>s});var n=i(6540);const r={},a=n.createContext(r);function o(e){const t=n.useContext(a);return n.useMemo((function(){return"function"==typeof e?e(t):{...t,...e}}),[t,e])}function s(e){let t;return t=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),n.createElement(a.Provider,{value:t},e.children)}}}]);